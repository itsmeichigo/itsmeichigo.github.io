<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concurrency on Huong Do</title><link>/tags/concurrency/</link><description>Recent content in Concurrency on Huong Do</description><generator>Hugo</generator><language>en</language><copyright>Huong Do</copyright><lastBuildDate>Tue, 14 Jun 2022 10:00:02 +0701</lastBuildDate><atom:link href="/tags/concurrency/index.xml" rel="self" type="application/rss+xml"/><item><title>Async Sequence instead of Combine?</title><link>/posts/async-sequence-combine/</link><pubDate>Tue, 14 Jun 2022 10:00:02 +0701</pubDate><guid>/posts/async-sequence-combine/</guid><description>&lt;p&gt;Ever since WWDC 2021, I’ve seen folks getting excited about the introduction of Swift concurrency, a.k.a async/await. It’s very common to come across comments that async/await will soon replace Combine, due to its potential and friendliness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: The motivation of this post is to discover the power of &lt;a href="https://href.li/?https://developer.apple.com/documentation/Swift/AsyncSequence"&gt;AsyncSequence&lt;/a&gt; when used with &lt;a href="https://href.li/?https://github.com/apple/swift-async-algorithms"&gt;Async Algorithms&lt;/a&gt;, to see if we can use it in place of Combine. To be more specific, I’m curious to see if we can use it with SwiftUI to handle form validation – one of my favorite applications of Combine when working with SwiftUI.&lt;/p&gt;</description></item></channel></rss>