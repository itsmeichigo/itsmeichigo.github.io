<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Huong Do</title><link>/posts/</link><description>Recent content in Posts on Huong Do</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Huong Do</copyright><lastBuildDate>Mon, 12 Feb 2024 17:00:00 +0701</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a CLI tool with SwiftPM for Mac app distribution</title><link>/posts/dmg-notary/</link><pubDate>Mon, 12 Feb 2024 17:00:00 +0701</pubDate><guid>/posts/dmg-notary/</guid><description>&lt;p&gt;Last week, I wanted to add an update to one of my mac apps &lt;a href="https://itsmeichigo.io/peachy"&gt;Peachy&lt;/a&gt; after a long time. I realized that the &lt;code&gt;atool&lt;/code&gt; used for notarizing mac apps has long been discontinued and it was time to switch to &lt;a href="https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution"&gt;&lt;code&gt;notarytool&lt;/code&gt;&lt;/a&gt;. It took me a while to read through Apple documentations and WWDC videos again to finally be able to distribute a working DMG for the new version.&lt;/p&gt;
&lt;p&gt;I had some free time due to the Lunar new year holiday, so this was an opportunity to learn something new. It&amp;rsquo;s time to automate the distribution process for my mac apps, and a CLI tool is a perfect solution for this.&lt;/p&gt;</description><content type="html"><![CDATA[<p>Last week, I wanted to add an update to one of my mac apps <a href="https://itsmeichigo.io/peachy">Peachy</a> after a long time. I realized that the <code>atool</code> used for notarizing mac apps has long been discontinued and it was time to switch to <a href="https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution"><code>notarytool</code></a>. It took me a while to read through Apple documentations and WWDC videos again to finally be able to distribute a working DMG for the new version.</p>
<p>I had some free time due to the Lunar new year holiday, so this was an opportunity to learn something new. It&rsquo;s time to automate the distribution process for my mac apps, and a CLI tool is a perfect solution for this.</p>
<p>First thing first, I went to my trusted friend Google (not ChatGPT, surprise üëª) - and looked for a quick tutorial to build a CLI tool in Swift. Surprisingly, all of the tutorials I found were outdated, except for the <del>bible</del> <a href="https://www.swift.org/getting-started/cli-swiftpm/">documentation</a>. This post will sum up things that I learned during the process.</p>
<h2 id="getting-started">Getting Started</h2>
<p>The first thing to do is create a Swift package of executable type:</p>
<pre tabindex="0"><code>$ swift package init --name dmg-notary --type executable
</code></pre><p>I used Swift 5.9, and the newly created package contained the <code>Package.swift</code> file defining the main target as <code>.executableTarget</code>. I went ahead to add <a href="https://apple.github.io/swift-argument-parser/documentation/argumentparser/gettingstarted/">ArgumentParser</a> as a dependency. This is essential for setting up and customizing a CLI tool.</p>
<p>The default package came with a <code>main.swift</code> file. We can create a <code>struct</code> in this file and trigger its <code>.main()</code> method. Since Swift 5.3, we can rename the file to the same as the type and mark it as the entry point with <code>@main</code>. This is the best practice since it makes the project structure cleaner and more organized.</p>
<p>The root <code>struct</code> needs to conform to the <code>PassableCommand</code> protocol and define the arguments and options for the CLI tool.</p>
<p>Another cool dependency is <a href="https://github.com/JohnSundell/ShellOut"><code>ShellOut</code></a> which is helpful for triggering command lines from our Swift scripts.</p>
<h2 id="implementation-highlights">Implementation highlights</h2>
<p><code>dmg-notary</code> was inspired by <a href="https://github.com/insidegui/dmgdist"><code>dmgdist</code></a>, which also depends on <a href="https://github.com/sindresorhus/create-dmg"><code>create-dmg</code></a> for generating a DMG from an app file. The first part of the script uses <code>shellout</code> to trigger the <code>create-dmg</code> command for this step.</p>
<p>The second part of the script triggers commands to <code>notarytool</code> to handle the notarization step. Due to the proxy, I had to handle the edge case when the user opts to enter their password separately instead of providing it in plain text in the command. The goal was to keep their password field hidden rather than plain text with <code>readline()</code>. I learned about <code>getpass</code> (and also the term <a href="https://en.wikipedia.org/wiki/Shoulder_surfing_%28computer_security%29">shoulder surfing</a>), which was the solution to this problem.</p>
<h2 id="conclusion">Conclusion</h2>
<p>The sourcecode of dmg-notary can be found on my Github <a href="https://github.com/itsmeichigo/dmg-notary">repo</a>.</p>
<h2 id="alternative-notarization-method">Alternative notarization method</h2>
<p>A simpler way to notarize mac apps is to add a post-action script to the Archive step of your app&rsquo;s scheme. More details can be found <a href="https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution/customizing_the_notarization_workflow/customizing_the_xcode_archive_process">here</a>.</p>
<h2 id="references">References</h2>
<ul>
<li><a href="https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution">Notarizing MacOS software before distribution</a></li>
<li><a href="https://www.swift.org/getting-started/cli-swiftpm/">Build a command-line tool</a></li>
<li><a href="https://rderik.com/blog/how-to-read-passwords-and-sensitive-data-from-the-command-line-using-swift/">How to read passwords and sensitive data from the command-line using Swift</a></li>
</ul>
]]></content></item><item><title>Releasing Jot It Down üóíÔ∏è</title><link>/posts/jot-it-down/</link><pubDate>Mon, 30 Jan 2023 10:00:02 +0701</pubDate><guid>/posts/jot-it-down/</guid><description>&lt;p&gt;&lt;img src="/posts/jot-it-down/Icon-1024.png" alt="Jot It Down"&gt;&lt;/p&gt;
&lt;p&gt;My new app &lt;a href="https://apps.apple.com/us/app/jot-it-down-minimal-note-app/id1668513911"&gt;Jot It Down&lt;/a&gt; has been released on the Mac App Store!&lt;/p&gt;
&lt;p&gt;Jot It Down is a simple app to quickly note down ideas or checklists.&lt;/p&gt;
&lt;p&gt;Highlights:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No formatting - focus on your contents only.&lt;/li&gt;
&lt;li&gt;Markdown content is highlighted automatically.&lt;/li&gt;
&lt;li&gt;Window always stays on top.&lt;/li&gt;
&lt;li&gt;Can copy checklist with Markdown format to save somewhere else.&lt;/li&gt;
&lt;li&gt;All notes are auto saved.&lt;/li&gt;
&lt;li&gt;Visit all past notes in the note list.&lt;/li&gt;
&lt;li&gt;Fully private: the app has no access to the Internet.&lt;/li&gt;
&lt;li&gt;Export files to your folders.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This was a small project created during my one week Lunar new year holiday. I always wanted a simple and accessible note app to jot down any quick thoughts and discard them later, and this app serves that purpose. Among thousands of note apps out there, hopefully Jot It Down is helpful for you too.&lt;/p&gt;</description><content type="html"><![CDATA[<p><img src="/posts/jot-it-down/Icon-1024.png" alt="Jot It Down"></p>
<p>My new app <a href="https://apps.apple.com/us/app/jot-it-down-minimal-note-app/id1668513911">Jot It Down</a> has been released on the Mac App Store!</p>
<p>Jot It Down is a simple app to quickly note down ideas or checklists.</p>
<p>Highlights:</p>
<ul>
<li>No formatting - focus on your contents only.</li>
<li>Markdown content is highlighted automatically.</li>
<li>Window always stays on top.</li>
<li>Can copy checklist with Markdown format to save somewhere else.</li>
<li>All notes are auto saved.</li>
<li>Visit all past notes in the note list.</li>
<li>Fully private: the app has no access to the Internet.</li>
<li>Export files to your folders.</li>
</ul>
<p>This was a small project created during my one week Lunar new year holiday. I always wanted a simple and accessible note app to jot down any quick thoughts and discard them later, and this app serves that purpose. Among thousands of note apps out there, hopefully Jot It Down is helpful for you too.</p>
<p>Some screenshots of the app:</p>
<p><img src="/posts/jot-it-down/history.png" alt="Note list"></p>
<p><img src="/posts/jot-it-down/checklist.png" alt="Checklist"></p>
<p><img src="/posts/jot-it-down/markdown.png" alt="Markdown highlighted content"></p>
<p><img src="/posts/jot-it-down/settings.png" alt="Settings"></p>
]]></content></item><item><title>An Adventure with Swift Charts</title><link>/posts/swift-charts/</link><pubDate>Mon, 04 Jul 2022 12:23:02 +0700</pubDate><guid>/posts/swift-charts/</guid><description>&lt;p&gt;&lt;em&gt;This post was original posted on &lt;a href="https://mobile.blog/2022/07/04/an-adventure-with-swift-charts/"&gt;mobile.blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;As you all may already know, one of the cool new things introduced in WWDC 2022 was &lt;a href="https://developer.apple.com/documentation/Charts"&gt;Swift Charts&lt;/a&gt;, a framework to create charts with SwiftUI. To learn more about the Swift Charts&amp;rsquo; potential, let&amp;rsquo;s go on a thrilling adventure to replace the chart in &lt;a href="https://apps.apple.com/us/app/woocommerce/id1389130815"&gt;WooCommerce iOS&lt;/a&gt; with this ‚ú®‚ú® shiny new framework ‚ú®‚ú®.&lt;/p&gt;
&lt;p&gt;To get started, here&amp;rsquo;s what the chart currently looks like in WooCommerce iOS. We&amp;rsquo;d want to build something similar using Swift Charts:&lt;/p&gt;</description><content type="html"><![CDATA[<p><em>This post was original posted on <a href="https://mobile.blog/2022/07/04/an-adventure-with-swift-charts/">mobile.blog</a>.</em></p>
<p>As you all may already know, one of the cool new things introduced in WWDC 2022 was <a href="https://developer.apple.com/documentation/Charts">Swift Charts</a>, a framework to create charts with SwiftUI. To learn more about the Swift Charts&rsquo; potential, let&rsquo;s go on a thrilling adventure to replace the chart in <a href="https://apps.apple.com/us/app/woocommerce/id1389130815">WooCommerce iOS</a> with this ‚ú®‚ú® shiny new framework ‚ú®‚ú®.</p>
<p>To get started, here&rsquo;s what the chart currently looks like in WooCommerce iOS. We&rsquo;d want to build something similar using Swift Charts:</p>
<p><img src="/posts/swift-charts/current-state.jpeg" alt="Current state"></p>
<h2 id="preparations">Preparations</h2>
<p>The plan is to keep the placeholder in the current view controller where we can add a hosting controller for the new chart (written in SwiftUI) there. We need a new simple <code>struct</code> to encapsulate the basic data needed for the chart. The <code>struct</code> needs to conform to <code>Identifiable</code> just so we can iterate through a collection of this type in SwiftUI.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#75715e">/// A struct for data to be displayed on a Swift chart.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">///</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">StoreStatsChartData</span>: Identifiable {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> id: String { UUID().uuidString }
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> date: Date
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> revenue: Double
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="basic-chart">Basic chart</h2>
<p>It&rsquo;s time to start the actual work! First, let&rsquo;s create a new SwiftUI view that contains only a single <code>Chart</code>. It needs a list of chart data as created above to create a line chart out of it.</p>
<p>In Swift Charts, the contents displaying data are called marks. Different chart types need different marks, for example for a line chart we need <a href="https://developer.apple.com/documentation/charts/linemark">LineMark</a>, and there are others like <a href="https://developer.apple.com/documentation/charts/areamark">AreaMark</a>, <a href="https://developer.apple.com/documentation/charts/pointmark">PointMark</a>, <a href="https://developer.apple.com/documentation/charts/rectanglemark">RectangleMark</a>, <a href="https://developer.apple.com/documentation/charts/rulemark">RuleMark</a> and <a href="https://developer.apple.com/documentation/charts/barmark">BarMark</a>. Since the chart in WooCommerce iOS has both a line and some gradient beneath it, we can use a combination of a <code>LineMark</code> and <code>AreaMark</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#75715e">/// Chart for store stats build with Swift Charts.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">///</span>
</span></span><span style="display:flex;"><span>@available(iOS <span style="color:#ae81ff">16</span>, <span style="color:#f92672">*</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">StoreStatsChart</span>: View {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> intervals: [StoreStatsChartData]
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> body: some View {
</span></span><span style="display:flex;"><span>        Chart(intervals) { item <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>            LineMark(x: .value(<span style="color:#e6db74">&#34;Date&#34;</span>, item.date),
</span></span><span style="display:flex;"><span>                     y: .value(<span style="color:#e6db74">&#34;Revenue&#34;</span>, item.revenue))
</span></span><span style="display:flex;"><span>            .foregroundStyle(Color(Constants.chartLineColor))
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>            AreaMark(x: .value(<span style="color:#e6db74">&#34;Date&#34;</span>, item.date),
</span></span><span style="display:flex;"><span>                     y: .value(<span style="color:#e6db74">&#34;Revenue&#34;</span>, item.revenue))
</span></span><span style="display:flex;"><span>            .foregroundStyle(.linearGradient(colors: [Color(Constants.chartGradientTopColor), Color(Constants.chartGradientBottomColor)],
</span></span><span style="display:flex;"><span>                                             startPoint: .top,
</span></span><span style="display:flex;"><span>                                             endPoint: .bottom))
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The result looks good with such minimal configuration:</p>
<p><img src="/posts/swift-charts/basic-chart.png" alt="Basic Chart"></p>
<h2 id="customizations">Customizations</h2>
<p>The new chart displays correct data but doesn&rsquo;t look quite close to what we want to build. Fortunately, it&rsquo;s not complicated to customize charts with Swift Charts. The hardest part for me was navigating through the framework API when the majority of the documentation is missing! Good thing the <a href="https://developer.apple.com/videos/play/wwdc2022/10137">WWDC video</a> got me through most of it.</p>
<h3 id="annotations">Annotations</h3>
<p>Now let&rsquo;s display a text over the chart that says &ldquo;No revenue this period&rdquo; when there&rsquo;s no data to show. The text should display on top and at the center of a horizontal line for revenue zero. This can be handled by adding a <code>RuleMark</code> for the horizontal line at position zero for y, and then adding a <code>Text</code> as annotation for the mark:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">!</span>hasRevenue {
</span></span><span style="display:flex;"><span>    RuleMark(y: .value(<span style="color:#e6db74">&#34;Zero revenue&#34;</span>, <span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span>        .annotation(position: .overlay, alignment: .center) {
</span></span><span style="display:flex;"><span>            Text(<span style="color:#e6db74">&#34;No revenue this period&#34;</span>)
</span></span><span style="display:flex;"><span>                .font(.footnote)
</span></span><span style="display:flex;"><span>                .padding(Constants.annotationPadding)
</span></span><span style="display:flex;"><span>                .background(Color(UIColor.systemBackground))
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And we&rsquo;re also hiding the y axis when there&rsquo;s no revenue in a chart. This can be handled with a single line using <code>chartYAxis</code> visibility modifier on the Chart:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span>.chartYAxis(hasRevenue ? .visible : .hidden)
</span></span></code></pre></div><p>And the result:</p>
<p><img src="/posts/swift-charts/annotation.png" alt="Chart with annotation"></p>
<h3 id="axis-customizations">Axis customizations</h3>
<p>The labels on the axes of the new chart didn&rsquo;t match the current chart - the labels were too dense, and the formats weren&rsquo;t right for both the dates and revenues. At first, I came up with a simple solution: since we already had implementations to configure labels for the axes, maybe I can send them to the new chart instead? Here was the result:</p>
<p><img src="/posts/swift-charts/string-values.jpeg" alt="Chart with string values"></p>
<p>This looks so horribly incorrect! The revenues aren&rsquo;t displayed in the correct order, which makes the chart wrong. The reason was probably due to the data for the chart being <code>String</code>s, which is a nominal data type, making Swift infers the chart differently from quantitative and temporal types (numbers and dates). I had to revert this change and look for another solution.</p>
<p>After watching the aforementioned WWDC video again, I learned that the axes can be configured with <code>AxisMarks</code> through <code>chartXAxis</code> and <code>chartYAxis</code> view modifiers on the Chart. The <code>AxisMarks</code> comes with a constructor that lets us define how to stride the data, and then define the content for each mark, which can be any or all of these: <code>[AxisTick](https://developer.apple.com/documentation/charts/axistick)</code>, <code>[AxisGridLine](https://developer.apple.com/documentation/charts/axisgridline)</code> and <code>[AxisValueLabel](https://developer.apple.com/documentation/charts/axisvaluelabel)</code>.</p>
<p>For the x-axis, I want to display a limited number of dates and format the date to match the correct time range for the current tab. I set the stride for the dates, and then use only a label for each mark to match the current design:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span>.chartXAxis {
</span></span><span style="display:flex;"><span>    AxisMarks(values: .stride(by: xAxisStride, count: xAxisStrideCount)) { date <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>        AxisValueLabel(format: xAxisLabelFormatStyle(<span style="color:#66d9ef">for</span>: date.<span style="color:#66d9ef">as</span>(Date.<span style="color:#66d9ef">self</span>) ?? Date()))
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">var</span> xAxisStride: Calendar.Component {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> timeRange {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> .today:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> .hour
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> .thisWeek, .thisMonth:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> .day
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> .thisYear:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> .month
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">var</span> xAxisStrideCount: Int {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> timeRange {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> .today:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> .thisWeek:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> .thisMonth:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> .thisYear:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">xAxisLabelFormatStyle</span>(<span style="color:#66d9ef">for</span> date: Date) -&gt; Date.FormatStyle {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> timeRange {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> .today:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> .dateTime.hour()
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> .thisWeek, .thisMonth:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> date == intervals.first?.date {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> .dateTime.month(.abbreviated).day(.twoDigits)
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> .dateTime.day(.twoDigits)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> .thisYear:
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> .dateTime.month(.abbreviated)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>For the y-axis, we need to work with <code>AxisMarks</code> as well, but the solution is a bit different because the values are numeric. In the current design, we want to display only 3 lines for the y-axis, so I had to calculate the stride such that the data is separated into 2 groups. The labels need to use custom format, so I do that in a helper function and send the formatted content to the <code>AxisValueLabel</code> directly. I also want to display the label on the leading edge, so I set it to the position value of <code>AxisMarks</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span>.chartYAxis {
</span></span><span style="display:flex;"><span>    AxisMarks(position: .leading, values: .stride(by: yAxisStride)) { value <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>        AxisGridLine()
</span></span><span style="display:flex;"><span>        AxisValueLabel(yAxisLabel(<span style="color:#66d9ef">for</span>: value.<span style="color:#66d9ef">as</span>(Double.<span style="color:#66d9ef">self</span>) ?? <span style="color:#ae81ff">0</span>))
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">var</span> yAxisStride: Double {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> minValue = intervals.map { $0.revenue }.min() ?? <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> maxValue = intervals.map { $0.revenue }.max() ?? <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> (minValue <span style="color:#f92672">+</span> maxValue) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">yAxisLabel</span>(<span style="color:#66d9ef">for</span> revenue: Double) -&gt; String {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> revenue == <span style="color:#ae81ff">0.0</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Do not show the &#34;0&#34; label on the Y axis</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> currencySymbol = ServiceLocator.currencySettings.symbol(from: ServiceLocator.currencySettings.currencyCode)
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> CurrencyFormatter(currencySettings: ServiceLocator.currencySettings)
</span></span><span style="display:flex;"><span>            .formatCurrency(using: revenue.humanReadableString(shouldHideDecimalsForIntegerAbbreviatedValue: <span style="color:#66d9ef">true</span>),
</span></span><span style="display:flex;"><span>                            currencyPosition: ServiceLocator.currencySettings.currencyPosition,
</span></span><span style="display:flex;"><span>                            currencySymbol: currencySymbol,
</span></span><span style="display:flex;"><span>                            isNegative: revenue.sign == .minus)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And the result looks great:</p>
<p><img src="/posts/swift-charts/customized-axes.png" alt="Chart with customized axes"></p>
<h3 id="interactions-with-gestures">Interactions with gestures</h3>
<p>One last touch to the new chart that I want to add is the feature to highlight a selected date and its revenue when touching any part of the chart. I want to support both tap and drag gestures, and display a vertical line on the date closest to the touch location, while also sending a callback about the selected interval index to update the parent controller UI.</p>
<p>This can be handled with the <code>chartOverlay</code> modifier together with a <code>GeometryReader</code> to find the position of the touch location on the screen and determine the value at that position using <code>ChartProxy</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span>.chartOverlay { proxy <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>    GeometryReader { geometry <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>        Rectangle().fill(.clear).contentShape(Rectangle())
</span></span><span style="display:flex;"><span>            .gesture(DragGesture()
</span></span><span style="display:flex;"><span>                .onChanged { value <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>                    updateSelectedDate(at: value.location,
</span></span><span style="display:flex;"><span>                                       proxy: proxy,
</span></span><span style="display:flex;"><span>                                       geometry: geometry)
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            )
</span></span><span style="display:flex;"><span>            .onTapGesture { location <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>                updateSelectedDate(at: location,
</span></span><span style="display:flex;"><span>                                   proxy: proxy,
</span></span><span style="display:flex;"><span>                                   geometry: geometry)
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">updateSelectedDate</span>(at location: CGPoint, proxy: ChartProxy, geometry: GeometryProxy) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> xPosition = location.x <span style="color:#f92672">-</span> geometry[proxy.plotAreaFrame].origin.x
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">guard</span> <span style="color:#66d9ef">let</span> date: Date = proxy.value(atX: xPosition) <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    selectedDate = intervals
</span></span><span style="display:flex;"><span>        .sorted(by: {
</span></span><span style="display:flex;"><span>            abs($0.date.timeIntervalSince(date)) <span style="color:#f92672">&lt;</span> abs($1.date.timeIntervalSince(date))
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>        .first?.date
</span></span><span style="display:flex;"><span>    selectedRevenue = intervals.first(<span style="color:#66d9ef">where</span>: { $0.date == selectedDate })?.revenue
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> index = intervals.firstIndex(<span style="color:#66d9ef">where</span>: { $0.date == selectedDate }) {
</span></span><span style="display:flex;"><span>        onIntervalSelected(index)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here <code>selectedDate</code> and <code>selectedRevenue</code> are two <code>@State</code> variables that are used to add a <code>RuleMark</code> and <code>PointMark</code> to the chart:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> selectedDate = selectedDate, hasRevenue {
</span></span><span style="display:flex;"><span>    RuleMark(x: .value(<span style="color:#e6db74">&#34;Selected date&#34;</span>, selectedDate))
</span></span><span style="display:flex;"><span>        .foregroundStyle(Color(Constants.chartHighlightLineColor))
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> selectedRevenue = selectedRevenue {
</span></span><span style="display:flex;"><span>        PointMark(x: .value(<span style="color:#e6db74">&#34;Selected date&#34;</span>, selectedDate),
</span></span><span style="display:flex;"><span>                  y: .value(<span style="color:#e6db74">&#34;Selected revenue&#34;</span>, selectedRevenue))
</span></span><span style="display:flex;"><span>        .foregroundStyle(Color(Constants.chartHighlightLineColor))
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And the final result üéâ</p>
<p><img src="/posts/swift-charts/final-chart.gif" alt="Final chart"></p>
<h2 id="further-improvements">Further improvements</h2>
<p>The experiment was pretty successful, but there are still some points in my checklist that weren&rsquo;t covered:</p>
<ul>
<li>The <code>PointMark</code> in the highlighted view needs to have a border and shadow, but I don&rsquo;t know how to handle that yet. I tried adding those in the Color view of the mark&rsquo;s foreground, but the output was not the expected <code>ForegroundStyle</code>.</li>
<li>The <code>PointMark</code> above also doesn&rsquo;t really align with the label on the x-axis - this is another unsolved mystery to me.</li>
<li>It&rsquo;d be nice to have some animation when the <code>Chart</code> appears. This was not covered in the WWDC video so I will need some more time to figure this out üòÖ</li>
</ul>
<p>If you&rsquo;re interested in playing with this experiment, join me on the branch <a href="https://github.com/woocommerce/woocommerce-ios/tree/hackweek/swift-charts-dashboard">hackweek/swift-charts-dashboard</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I hope you enjoyed this experiment with Swift Charts! We are looking forward to integrating this framework, it was fun to learn how it works and the promising features that it offers. Let me know if you have any questions!</p>
]]></content></item><item><title>Async Sequence instead of Combine?</title><link>/posts/async-sequence-combine/</link><pubDate>Tue, 14 Jun 2022 10:00:02 +0701</pubDate><guid>/posts/async-sequence-combine/</guid><description>&lt;p&gt;Ever since WWDC 2021, I‚Äôve seen folks getting excited about the introduction of Swift concurrency, a.k.a async/await. It‚Äôs very common to come across comments that async/await will soon replace Combine, due to its potential and friendliness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: The motivation of this post is to discover the power of &lt;a href="https://href.li/?https://developer.apple.com/documentation/Swift/AsyncSequence"&gt;AsyncSequence&lt;/a&gt; when used with &lt;a href="https://href.li/?https://github.com/apple/swift-async-algorithms"&gt;Async Algorithms&lt;/a&gt;, to see if we can use it in place of Combine. To be more specific, I‚Äôm curious to see if we can use it with SwiftUI to handle form validation ‚Äì one of my favorite applications of Combine when working with SwiftUI.&lt;/p&gt;</description><content type="html"><![CDATA[<p>Ever since WWDC 2021, I‚Äôve seen folks getting excited about the introduction of Swift concurrency, a.k.a async/await. It‚Äôs very common to come across comments that async/await will soon replace Combine, due to its potential and friendliness.</p>
<p><strong>TL;DR</strong>: The motivation of this post is to discover the power of <a href="https://href.li/?https://developer.apple.com/documentation/Swift/AsyncSequence">AsyncSequence</a> when used with <a href="https://href.li/?https://github.com/apple/swift-async-algorithms">Async Algorithms</a>, to see if we can use it in place of Combine. To be more specific, I‚Äôm curious to see if we can use it with SwiftUI to handle form validation ‚Äì one of my favorite applications of Combine when working with SwiftUI.</p>
<p>The short answer is: <strong>Yes!</strong> üéâ</p>
<h2 id="bridging-from-combine-to-asyncsequence">Bridging from Combine to AsyncSequence</h2>
<p>Before getting started, I was thinking that it‚Äôs silly to do validation with anything else while we‚Äôre already using Combine to work with SwiftUI. Simply put, in WooCommerce iOS, we‚Äôve been using MVVM with SwiftUI, so the views‚Äô states are stored in published variables (<code>@Published</code>) in view models. And it makes so much sense to subscribe to those variables to evaluate their values right?</p>
<p>But it has to be possible to bridge from Combine to AsyncSequence. So to be totally honest, I started by googling: ‚Äúpublished variable equivalent in async-await‚Äù and found that the bridge is pretty simple: since iOS 15, there‚Äôs a new instance property for Combine‚Äôs Publisher named <a href="https://href.li/?https://developer.apple.com/documentation/combine/publisher/values-1dm9r"><code>values</code></a>, which returns either an <a href="https://href.li/?https://developer.apple.com/documentation/combine/asyncpublisher"><code>AsyncPublisher</code></a> or an <a href="https://href.li/?https://developer.apple.com/documentation/combine/asyncthrowingpublisher"><code>AsyncThrowingPublisher</code></a> (depending on whether the stream can throw errors). These types conform to AsyncSequence and there you have it, everything is possible!</p>
<h2 id="experiments">Experiments</h2>
<p>If you‚Äôre interested, you can join me in my experimental branch: <a href="https://href.li/?https://github.com/woocommerce/woocommerce-ios/tree/hackweek/async-algo">hackweek/async-algo</a>.</p>
<p>One of my favorite publishers in Combine is combineLatest. This is helpful for considering the values of different fields when validating a form. Let‚Äôs consider <a href="https://href.li/?https://github.com/woocommerce/woocommerce-ios/blob/8f563ccaaa88547904b9ea571771c88461e96285/WooCommerce/Classes/ViewRelated/Products/Categories/ProductCategoryListViewController.swift#L105-L113">an example</a>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span>viewModel.<span style="color:#960050;background-color:#1e0010">$</span>selectedCategories.combineLatest(viewModel.<span style="color:#960050;background-color:#1e0010">$</span>categoryViewModels)
</span></span><span style="display:flex;"><span>    .map { [<span style="color:#66d9ef">weak</span> <span style="color:#66d9ef">self</span>] selectedItems, models -&gt; Bool <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">guard</span> <span style="color:#66d9ef">let</span> self = <span style="color:#66d9ef">self</span>, <span style="color:#66d9ef">self</span>.configuration.clearSelectionEnabled <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> selectedItems.isEmpty <span style="color:#f92672">||</span> models.isEmpty
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    .assign(to: <span style="color:#960050;background-color:#1e0010">\</span>.isHidden, on: clearSelectionButtonBarView)
</span></span><span style="display:flex;"><span>    .store(<span style="color:#66d9ef">in</span>: &amp;subscriptions)
</span></span></code></pre></div><p>Here <code>selectedCategories</code> and <code>categoryViewModels</code> are two published variables that we need to evaluate to decide whether to hide a button on the UI. When importing <code>AsyncAlgorithms</code>, we can rewrite this in a very similar fashion but with <code>AsyncSequence</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span>Task { @MainActor <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> await (selectedItems, models) <span style="color:#66d9ef">in</span> combineLatest(viewModel.<span style="color:#960050;background-color:#1e0010">$</span>selectedCategories.values, viewModel.<span style="color:#960050;background-color:#1e0010">$</span>categoryViewModels.values) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">guard</span> configuration.clearSelectionEnabled <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            clearSelectionButtonBarView.isHidden = <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        clearSelectionButtonBarView.isHidden = selectedItems.isEmpty <span style="color:#f92672">||</span> models.isEmpty
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Since this snippet was added in a synchronous context, I had to use a <code>Task</code> to wrap around the logic. One good thing about using the <code>for</code> loop is that we can get rid of the <code>guard let self = self</code> dance, and we can also migrate away from keeping a variable for subscriptions.</p>
<p>Let‚Äôs move on to a <a href="https://href.li/?https://github.com/woocommerce/woocommerce-ios/blob/8f563ccaaa88547904b9ea571771c88461e96285/WooCommerce/Classes/ViewRelated/Orders/Order%20Details/Shipping%20Labels/Create%20Shipping%20Label%20Form/Customs/ShippingLabelCustomsFormInputViewModel.swift#L211-L230">more complicated example</a>. One interesting thing about working with tuples is that there usually is some limit to the number of items grouped together. In RxSwift, <code>combineLatest</code> allows up to 8 streams, while in Combine the maximum number of publishers to be combined is 4. <code>AsyncAlgorithms</code> allows 3 at the time of writing, but I managed to create subgroups and combine them together:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> groupOne = combineLatest(<span style="color:#960050;background-color:#1e0010">$</span>classesAbove2500usd.values, <span style="color:#960050;background-color:#1e0010">$</span>contentsType.values, <span style="color:#960050;background-color:#1e0010">$</span>contentExplanation.values)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> groupTwo = combineLatest(<span style="color:#960050;background-color:#1e0010">$</span>itn.values, <span style="color:#960050;background-color:#1e0010">$</span>itemsValidation.values)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> groupThree = combineLatest(<span style="color:#960050;background-color:#1e0010">$</span>restrictionComments.values, <span style="color:#960050;background-color:#1e0010">$</span>restrictionType.values)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> validation = combineLatest(groupOne, groupTwo, groupThree)
</span></span><span style="display:flex;"><span>    .map { [<span style="color:#66d9ef">weak</span> <span style="color:#66d9ef">self</span>] groupOne, groupTwo, groupThree -&gt; Bool <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">guard</span> <span style="color:#66d9ef">let</span> self = <span style="color:#66d9ef">self</span> <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> (classesAbove2500usd, contentsType, contentExplanation) = groupOne
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> (itn, itemsValidation) = groupTwo
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> (restrictionComments, restrictionType) = groupThree
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#f92672">!</span><span style="color:#66d9ef">self</span>.checkMissingContentExplanation(contentExplanation, with: contentsType) <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">!</span><span style="color:#66d9ef">self</span>.checkMissingRestrictionComment(restrictionComments, with: restrictionType) <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">!</span><span style="color:#66d9ef">self</span>.checkMissingITNForDestination(itn) <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">!</span><span style="color:#66d9ef">self</span>.checkMissingITN(itn, <span style="color:#66d9ef">for</span>: classesAbove2500usd) <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">!</span><span style="color:#66d9ef">self</span>.checkInvalidITN(itn) <span style="color:#f92672">&amp;&amp;</span>
</span></span><span style="display:flex;"><span>        itemsValidation.values.first(<span style="color:#66d9ef">where</span>: { <span style="color:#f92672">!</span>$0 }) == <span style="color:#66d9ef">nil</span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    .removeDuplicates()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> await isValid <span style="color:#66d9ef">in</span> validation {
</span></span><span style="display:flex;"><span>    validForm = isValid
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this case, we can actually <code>await</code> on the <code>combineLatest</code> of the 3 groups, but I wanted to try out the <code>map</code> function on the sequence. Since what we have here is an async sequence, we have to capture <code>self</code> and the guard let dance is here again. <code>removeDuplicates</code> is another addition from <code>AsyncAlgorithms</code> ‚Äì which is very helpful as well.</p>
<p>One thing to note though ‚Äì <code>AsyncAlgorithms</code> is still a work in progress, so not everything is ready for use yet for now. I tried playing with <code>debounce</code> and it seems that it‚Äôs not ready yet üòÖ:</p>
<p><img src="/posts/async-sequence-combine/async-algo-debounce.jpeg" alt="AsyncAlgorithms Debounce not available"></p>
<h2 id="the-verdict">The verdict</h2>
<p>As you can see from my very brief experiments, it is possible to validate forms reactively without Combine if you really need to. I‚Äôll leave you all to judge whether it is worth it ‚Äì but I‚Äôll subtly insert my opinion here that using Combine is a more straightforward solution when working with SwiftUI. My opinion can however go obsolete if Apple decides to add async/await support for state observation in SwiftUI in the next WWDC üòÅ.</p>
<p>Async Algorithms, however, is a really promising library if we wish to work with reactive pardigm within the context of Swift concurrency. In other words, we should consider integrating it when migrating away from Combine while keeping the reactive logic in your code. As said earlier, the library is still in beta, so we‚Äôll need to wait until it‚Äôs mature enough, unless we want to be adventurous.</p>
<h2 id="thoughts">Thoughts?</h2>
<p>What do you think about these experiments? Is there anything else I should have covered? Let‚Äôs discuss this further if you‚Äôre interested üòä</p>
<p>References and further reads:</p>
<ul>
<li><a href="https://href.li/?https://www.youtube.com/watch?v=ePPm2ftSVqw&amp;ab_channel=SwiftfulThinking">How to use AsyncPublisher to convert @Published to Async / Await | Swift Concurrency #12</a></li>
<li><a href="https://href.li/?https://trycombine.com/posts/combine-async-sequence-1/">Bridge from Combine to AsyncSequence ‚Äì the plan (p. 1)</a></li>
<li><a href="https://href.li/?https://forums.swift.org/t/asyncpublisher-causes-crash-in-rather-simple-situation/56574">AsyncPublisher causes crash in rather simple situation</a></li>
<li><a href="https://href.li/?https://www.donnywals.com/comparing-use-cases-for-async-sequences-and-publishers/">Comparing use cases for async sequences and publishers</a></li>
<li><a href="https://href.li/?https://developer.apple.com/wwdc22/sessions/">Meet Swift Async Algorithms</a></li>
</ul>
]]></content></item><item><title>Releasing Peachy üçë</title><link>/posts/peachy/</link><pubDate>Sun, 20 Mar 2022 10:00:02 +0701</pubDate><guid>/posts/peachy/</guid><description>&lt;p&gt;&lt;img src="/posts/peachy/demo.gif" alt="Peachy Demo"&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m happy to announce that &lt;a href="https://itsmeichigo.io/peachy/"&gt;Peachy&lt;/a&gt; is finally out in the wild! üéâ&lt;/p&gt;
&lt;p&gt;Peachy is a Mac app for entering Kaomojis easily. This was inspired by &lt;a href="https://matthewpalmer.net/rocket/"&gt;Rocket&lt;/a&gt; and suggested/encouraged/challenged by a friend. I took this as an opportunity to get my feet wet with Mac app development, and it was a wholesome experience with a lot of challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integration of SwiftUI and AppKit. SwiftUI is nice for creating simple views, but for complex customizations, AppKit is the solution. It was painful, but I did learn a lot.&lt;/li&gt;
&lt;li&gt;Integration of the Accessibility API and learning AppleScript.&lt;/li&gt;
&lt;li&gt;A lot of workarounds!&lt;/li&gt;
&lt;li&gt;Since Accessibility API doesn&amp;rsquo;t work with Sandbox, the app cannot be shipped in the App Store. This came with another bunch of challenges:
&lt;ul&gt;
&lt;li&gt;Creating and notarizing the DMG for the app.&lt;/li&gt;
&lt;li&gt;Hosting the app manually.&lt;/li&gt;
&lt;li&gt;Building a landing page to introduce the app.&lt;/li&gt;
&lt;li&gt;Managing app versions with &lt;a href="https://sparkle-project.org"&gt;Sparkle&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More excitingly, Peachy is FREE and &lt;a href="https://github.com/itsmeichigo/peachy"&gt;opensource&lt;/a&gt;! If you like Peachy, please feel free to &lt;a href="https://www.buymeacoffee.com/itsmeichigo"&gt;buy me a cocktail&lt;/a&gt;. Cheers! üç∏&lt;/p&gt;</description><content type="html"><![CDATA[<p><img src="/posts/peachy/demo.gif" alt="Peachy Demo"></p>
<p>I&rsquo;m happy to announce that <a href="https://itsmeichigo.io/peachy/">Peachy</a> is finally out in the wild! üéâ</p>
<p>Peachy is a Mac app for entering Kaomojis easily. This was inspired by <a href="https://matthewpalmer.net/rocket/">Rocket</a> and suggested/encouraged/challenged by a friend. I took this as an opportunity to get my feet wet with Mac app development, and it was a wholesome experience with a lot of challenges:</p>
<ul>
<li>Integration of SwiftUI and AppKit. SwiftUI is nice for creating simple views, but for complex customizations, AppKit is the solution. It was painful, but I did learn a lot.</li>
<li>Integration of the Accessibility API and learning AppleScript.</li>
<li>A lot of workarounds!</li>
<li>Since Accessibility API doesn&rsquo;t work with Sandbox, the app cannot be shipped in the App Store. This came with another bunch of challenges:
<ul>
<li>Creating and notarizing the DMG for the app.</li>
<li>Hosting the app manually.</li>
<li>Building a landing page to introduce the app.</li>
<li>Managing app versions with <a href="https://sparkle-project.org">Sparkle</a>.</li>
</ul>
</li>
</ul>
<p>More excitingly, Peachy is FREE and <a href="https://github.com/itsmeichigo/peachy">opensource</a>! If you like Peachy, please feel free to <a href="https://www.buymeacoffee.com/itsmeichigo">buy me a cocktail</a>. Cheers! üç∏</p>
]]></content></item><item><title>Working with observable objects in SwiftUI</title><link>/posts/swiftui-observable-objects/</link><pubDate>Sat, 11 Sep 2021 10:00:02 +0701</pubDate><guid>/posts/swiftui-observable-objects/</guid><description>&lt;p&gt;Earlier this week I learned about &lt;code&gt;@StateObject&lt;/code&gt; &lt;a href="https://developer.apple.com/documentation/swiftui/stateobject/init%28wrappedvalue:%29"&gt;initializer&lt;/a&gt; when reviewing a pull request. The idea was to create a view model for a SwiftUI view using some injected parameter and keep the view model as a &lt;code&gt;@StateObject&lt;/code&gt; so that the its state is persisted when the view is redrawn. The view creates the &lt;code&gt;@StateObject&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ItemViewModel&lt;/span&gt;: ObservableObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; @Published &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; itemName: String
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;init&lt;/span&gt;(item: Item) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;self&lt;/span&gt;.itemName = item.name
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ItemView&lt;/span&gt;: View {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; @StateObject &lt;span style="color:#66d9ef"&gt;private&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; viewModel: ItemViewModel
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;init&lt;/span&gt;(item: Item) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _viewModel = StateObject(wrappedValue: ItemViewModel(item: item))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; body: some View {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; TextField(&lt;span style="color:#e6db74"&gt;&amp;#34;Item Name&amp;#34;&lt;/span&gt;, text: viewModel.&lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt;itemName)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem with this initializer is that it&amp;rsquo;s not meant to be used directly. As Apple documentation says it:&lt;/p&gt;</description><content type="html"><![CDATA[<p>Earlier this week I learned about <code>@StateObject</code> <a href="https://developer.apple.com/documentation/swiftui/stateobject/init%28wrappedvalue:%29">initializer</a> when reviewing a pull request. The idea was to create a view model for a SwiftUI view using some injected parameter and keep the view model as a <code>@StateObject</code> so that the its state is persisted when the view is redrawn. The view creates the <code>@StateObject</code> like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ItemViewModel</span>: ObservableObject {
</span></span><span style="display:flex;"><span>    @Published <span style="color:#66d9ef">var</span> itemName: String
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">init</span>(item: Item) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">self</span>.itemName = item.name
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ItemView</span>: View {
</span></span><span style="display:flex;"><span>    @StateObject <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">var</span> viewModel: ItemViewModel
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">init</span>(item: Item) {
</span></span><span style="display:flex;"><span>        _viewModel = StateObject(wrappedValue: ItemViewModel(item: item))
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> body: some View {
</span></span><span style="display:flex;"><span>        TextField(<span style="color:#e6db74">&#34;Item Name&#34;</span>, text: viewModel.<span style="color:#960050;background-color:#1e0010">$</span>itemName)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The problem with this initializer is that it&rsquo;s not meant to be used directly. As Apple documentation says it:</p>
<blockquote>
<p>You don‚Äôt call this initializer directly. Instead, declare a property with the <code>@StateObject</code> attribute in a <a href="https://developer.apple.com/documentation/swiftui/view"><code>View</code></a>, <a href="https://developer.apple.com/documentation/swiftui/app"><code>App</code></a>, or <a href="https://developer.apple.com/documentation/swiftui/scene"><code>Scene</code></a>, and provide an initial value</p>
</blockquote>
<p>More interestingly, <a href="https://swiftui-lab.com/random-lessons/#data-10">an answer</a> on the WWDC21&rsquo;s SwiftUI Lab confirms that this is an acceptable use. I&rsquo;m not quite happy with this answer though, because it&rsquo;s not cool to go against the recommended use. So we can fix this by injecting the view model from outside, right?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ItemView</span>: View {
</span></span><span style="display:flex;"><span>    @StateObject <span style="color:#66d9ef">var</span> viewModel: ItemViewModel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> body: some View {
</span></span><span style="display:flex;"><span>        Text(<span style="color:#e6db74">&#34;Test: </span><span style="color:#e6db74">\(</span>viewModel.id<span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ItemListView</span>: View {
</span></span><span style="display:flex;"><span>    @ObservedObject <span style="color:#66d9ef">var</span> viewModel: ItemListViewModel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> body: some View {
</span></span><span style="display:flex;"><span>        ForEach(viewModel.items) { item <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>            ItemView(viewModel: ItemViewModel(item: item))
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>But this doesn&rsquo;t seem right!</p>
<p>I&rsquo;ve read several articles about the difference between <code>@StateObject</code> and <code>@ObservedObject</code>, and the general idea is simple: You should use <code>@StateObject</code> if the view you&rsquo;re using creates the instance of the <code>ObservableObject</code> itself. If it does not, use <code>@ObservedObject</code> instead.</p>
<p>Consider <code>@StateObject</code> something similar to <code>@State</code> but to use with <code>ObservableObject</code>. They both are created and owned by the SwiftUI view. Their values are controlled internally and persisted by SwiftUI internally throughout re-renders of the view. <code>@ObservedObject</code>, however, is not persisted by SwiftUI.</p>
<p>Back to our initial code problem. Using the injected <code>@StateObject</code> is incorrect, so we should go ahead and replace it with <code>@ObservedObject</code>. Normally we&rsquo;re done here, since we usually want fresh instances of items every time a list redraws itself.</p>
<p>But what if we want to keep the text field value when rotating the device? When device orientation changes, the item list is redrawn, which creates new views for the child items with new instances of their view models. This will reset the content of a <code>ItemView</code>&rsquo;s text field to its initial value.</p>
<p>The solution is to hold on the the item view models to persist the state of the item views:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ItemListViewModel</span>: ObservableObject {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span>(<span style="color:#66d9ef">set</span>) <span style="color:#66d9ef">var</span> itemViewModels: [ItemViewModel]
</span></span><span style="display:flex;"><span>    @Published <span style="color:#66d9ef">var</span> items: [Item]
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">init</span>(items: Item) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">self</span>.items = items
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">self</span>.itemViewModel = items.map { ItemViewModel(item: $0) }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ItemListView</span>: View {
</span></span><span style="display:flex;"><span>    @ObservedObject <span style="color:#66d9ef">var</span> viewModel: ItemListViewModel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> body: some View {
</span></span><span style="display:flex;"><span>        ForEach(viewModel.items) { item <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>            viewModel.itemViewModels.first(<span style="color:#66d9ef">where</span>: { $0.item == item }).map { viewModel <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>                ItemView(viewModel: viewModel)
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">ItemView</span>: View {
</span></span><span style="display:flex;"><span>    @ObservedObject <span style="color:#66d9ef">var</span> viewModel: ItemViewModel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> body: some View {
</span></span><span style="display:flex;"><span>        Text(<span style="color:#e6db74">&#34;Test: </span><span style="color:#e6db74">\(</span>viewModel.id<span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Since our <code>ItemListViewModel</code> now keeps references of all the items&rsquo; view models, the text field of each item view is kept intact when the view is redrawn! üéâ</p>
<p>So whenever you find yourself needing an <code>ObservableObject</code> in a SwiftUI view, ask yourself two questions:</p>
<ul>
<li>Do I need <strong>external (injected) data</strong> to create the object? If yes, go for <code>@ObservedObject</code>, otherwise <code>@StateObject</code>.</li>
<li>I need to use an <code>@ObservedObject</code>, but do I need to <strong>persist its states</strong>? If yes, keep a reference of the object somewhere, otherwise, feel free to create a new instance for every view.</li>
</ul>
<p>I hope these tips are helpful for other folks working with SwiftUI in their projects!</p>
<p>More readings if you&rsquo;re interested:</p>
<ul>
<li><a href="https://swiftuipropertywrappers.com/">SwiftUI Property Wrappers</a></li>
<li><a href="https://www.donnywals.com/whats-the-difference-between-stateobject-and-observedobject/">What&rsquo;s the difference between @StateObject and @ObservedObject?</a></li>
<li><a href="https://sarunw.com/posts/how-to-initialize-stateobject-with-parameters-in-swiftui/">How to initialize @StateObject with parameters in SwiftUI</a></li>
</ul>
]]></content></item><item><title>Breaking down large pull requests</title><link>/posts/breaking-down-pull-requests/</link><pubDate>Tue, 13 Jul 2021 17:02:02 +0700</pubDate><guid>/posts/breaking-down-pull-requests/</guid><description>&lt;p&gt;&lt;em&gt;This post was originally posted in WooCommerce Mobile Project &lt;a href="https://wordpress.com/p2/"&gt;P2&lt;/a&gt; page. I figure this can be useful for other fellow developers as well so this is my public version of the post.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Usually we have several teams working on different features, and we break down tasks into bite-size ones ‚Äì so large PRs aren‚Äôt really a problem. However, for folks working alone on a backlog story, or joining the team for General Maintenance Rotation, and especially Trialmatticians ‚Äì it‚Äôs common to face the issue of handling a big task and having to break them down into smaller parts. So what are the best practices for this situation?&lt;/p&gt;</description><content type="html"><![CDATA[<p><em>This post was originally posted in WooCommerce Mobile Project <a href="https://wordpress.com/p2/">P2</a> page. I figure this can be useful for other fellow developers as well so this is my public version of the post.</em></p>
<p>Usually we have several teams working on different features, and we break down tasks into bite-size ones ‚Äì so large PRs aren‚Äôt really a problem. However, for folks working alone on a backlog story, or joining the team for General Maintenance Rotation, and especially Trialmatticians ‚Äì it‚Äôs common to face the issue of handling a big task and having to break them down into smaller parts. So what are the best practices for this situation?</p>
<h2 id="feature-branch-yay-or-nay">Feature Branch: Yay or Nay?</h2>
<p>In my previous gig, we had around 10 teams working on the same mono-repo project, so we maintained feature branches for each team. My take on this approach:</p>
<p>üéâ Yay: Each team has a separate space to work on their features.</p>
<p>ü§¶‚Äç‚ôÄÔ∏è Nay: It can be a pain when merging a long-lived branch, considering potential conflicts in terms of code and features. For example: a team can merge some fix that affects another team and that somehow slips through the crack. When the second team merges their feature, they discover the issue but it may be so close to the deadline and everyone gets panic! üí£üí•</p>
<p>So it seems like there are more cons than pros to me.</p>
<h2 id="early-merges-to-develop-branch">Early merges to develop branch</h2>
<p>Another solution is breaking down tasks and handling them in separate small PRs, which are merged into develop sequentially. Spoiler alert: this is preferred considering our team size and our strong emphasis on transparency. There are quite a few things to consider though:</p>
<ul>
<li><strong>Careful planning</strong> is highly recommended. When starting with a big task, it is important to separate them into smaller bits. You can start by considering changes you‚Äôll need to make to networking, storage, logic and UI layers. If your task focuses only on the UI layer, you can break it down into even smaller features. This will help with making sure PRs are focused and small, so that it‚Äôs easier for your teammate to review.</li>
<li>Work on <strong>non-user-facing tasks first</strong>. These have less affects on the app when merged, and usually are essential to be merged early to avoid conflicts (take Core Data versioning for example).</li>
<li>For user-facing changes, if your PR does not complete the feature, <strong>consider a feature flag</strong> to hide the feature from user. At WooCommerce mobile teams we have special tag <a href="https://github.com/woocommerce/woocommerce-ios/labels?q=feature-flagged">status: feature-flag</a> that can be used to let the team know that a feature is not yet available for testing on release builds.</li>
<li>Usually a PR can take some time to get merged and you want to work on another to unblock yourself. A good approach is to <strong>create a new PR basing on the previous PR‚Äôs branch</strong>. There&rsquo;s a really cool feature of Github that when the base branch is merged to develop, the dependent PR‚Äôs base will automatically change to develop!</li>
<li>It can be a good practice to tag your dependent PRs as <code>do not merge</code>, to make sure that they are not accidentally merged before their parent PR. Some may prefer to keep the dependent PRs as drafts instead. I myself prefer the former ‚Äì just so my teammates can review all PRs as soon as they can (like concurrency in programming üòÇ).</li>
</ul>
<p>In the end, if you have a number of pull requests depending on one another, you should have a chain like this:
<img src="/posts/breaking-down-pull-requests/PRs.png" alt="Dependend Pull Requests"></p>
<p>In my case, I was not sure if my PRs could get merged before code freeze, so during the development phase I kept the flag on only for local development (and off for both beta testing and production). You can consider keeping your flag off on local too if it can block other teammates when they need to run the old feature. Just make sure to include instructions to turn the flag on in the testing steps of your PR.</p>
<h2 id="final-thoughts">Final thoughts</h2>
<p>In conclusion, I want to highlight the 3 main takeaways of this post:</p>
<ul>
<li>Always keep your PRs small and focused.</li>
<li>It‚Äôs important to keep develop branch updated with your changes as early on as possible.</li>
<li>Feature flags are powerful for developing user-facing features.</li>
</ul>
<p>I hope this post is helpful for other developers to when working with pull requests. If you have more suggestions for best practices of pull requests, do reach out to me via <a href="https://twitter.com/itsmeichigo">Twitter</a>!</p>
<p>Until next time üëã</p>
]]></content></item><item><title>Releasing Fretboard üé∏</title><link>/posts/fretboard/</link><pubDate>Sat, 30 Jan 2021 10:00:02 +0701</pubDate><guid>/posts/fretboard/</guid><description>&lt;p&gt;&lt;img src="/posts/fretboard/logo.png" alt="Fretboard Logo"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/itsmeichigo/Fretboard"&gt;Fretboard&lt;/a&gt; is a weekend project to display guitar and ukulele chords using SwiftUI.&lt;/p&gt;
&lt;p&gt;Features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;üéµ Chord positions&lt;/li&gt;
&lt;li&gt;üåó Light / Dark modes&lt;/li&gt;
&lt;li&gt;üé∏ Guitar &amp;amp; ukulele chords with basic tunings&lt;/li&gt;
&lt;li&gt;‚è≥ More to come.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;
&lt;h4 id="swift-package-manager"&gt;Swift Package Manager&lt;/h4&gt;
&lt;p&gt;Add &lt;a href="https://github.com/itsmeichigo/Fretboard.git"&gt;https://github.com/itsmeichigo/Fretboard.git&lt;/a&gt; as the source and you&amp;rsquo;re good to go.&lt;/p&gt;
&lt;h4 id="manual-install"&gt;Manual install&lt;/h4&gt;
&lt;p&gt;Copy contents from Sources folder to your project.&lt;/p&gt;
&lt;h2 id="usage"&gt;Usage&lt;/h2&gt;
&lt;p&gt;Get your desired instruments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Swift" data-lang="Swift"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; guitar = Instrument.guitar
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; ukulele = Instrument.ukulele
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Each instrument comes with their own name, keys, suffixes and chords. Get a list of positions for a chord using key and suffix:&lt;/p&gt;</description><content type="html"><![CDATA[<p><img src="/posts/fretboard/logo.png" alt="Fretboard Logo"></p>
<p><a href="https://github.com/itsmeichigo/Fretboard">Fretboard</a> is a weekend project to display guitar and ukulele chords using SwiftUI.</p>
<p>Features:</p>
<ul>
<li>üéµ Chord positions</li>
<li>üåó Light / Dark modes</li>
<li>üé∏ Guitar &amp; ukulele chords with basic tunings</li>
<li>‚è≥ More to come.</li>
</ul>
<h2 id="installation">Installation</h2>
<h4 id="swift-package-manager">Swift Package Manager</h4>
<p>Add <a href="https://github.com/itsmeichigo/Fretboard.git">https://github.com/itsmeichigo/Fretboard.git</a> as the source and you&rsquo;re good to go.</p>
<h4 id="manual-install">Manual install</h4>
<p>Copy contents from Sources folder to your project.</p>
<h2 id="usage">Usage</h2>
<p>Get your desired instruments:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> guitar = Instrument.guitar
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> ukulele = Instrument.ukulele
</span></span></code></pre></div><p>Each instrument comes with their own name, keys, suffixes and chords. Get a list of positions for a chord using key and suffix:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> dAug9Positions = guitar.findChordPositions(key: <span style="color:#e6db74">&#34;D&#34;</span>, suffix: <span style="color:#e6db74">&#34;aug9&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">let</span> cMajorUkuPositions = Instrument.ukulele.findChordPositions(key: <span style="color:#e6db74">&#34;C&#34;</span>, suffix: <span style="color:#e6db74">&#34;major&#34;</span>)
</span></span></code></pre></div><p>Display any chord by sending it to <code>FretboardView</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Swift" data-lang="Swift"><span style="display:flex;"><span>FretboardView(position: dAug9Position)
</span></span><span style="display:flex;"><span>    .frame(width: <span style="color:#ae81ff">100</span>, height: <span style="color:#ae81ff">200</span>)
</span></span></code></pre></div><h2 id="demo-app">Demo app</h2>
<p><img src="/posts/fretboard/screenshot.png" alt="screenshot"></p>
]]></content></item><item><title>Combine from RxSwift - Highlights for smooth adaption</title><link>/posts/combine-from-rxswift/</link><pubDate>Wed, 16 Dec 2020 21:23:02 +0700</pubDate><guid>/posts/combine-from-rxswift/</guid><description>&lt;p&gt;RxSwift has been around since 2015 and widely known among Apple developer community as an efficient open-sourced FRP library. In WWDC 2019 Apple introduced their very own FRP framework, making it possible to utilize the paradigm natively with declarative Swift API. The two frameworks share quite a few similarities in terms of principles and usage, so it can be not too daunting to get your feet wet with Combine if you have already been using RxSwift in your projects.&lt;/p&gt;</description><content type="html"><![CDATA[<p>RxSwift has been around since 2015 and widely known among Apple developer community as an efficient open-sourced FRP library. In WWDC 2019 Apple introduced their very own FRP framework, making it possible to utilize the paradigm natively with declarative Swift API. The two frameworks share quite a few similarities in terms of principles and usage, so it can be not too daunting to get your feet wet with Combine if you have already been using RxSwift in your projects.</p>
<p>If you search around the topic, it‚Äôs easy to find a <a href="https://medium.com/gett-engineering/rxswift-to-apples-combine-cheat-sheet-e9ce32b14c5b">cheatsheet</a> for migrating from RxSwift to Combine summed up by <a href="https://twitter.com/freak4pc">Shai Mishali</a> which is helpful to have a good overview comparision between the two frameworks. In this article I would like to highlight some interesting points about Combine from the viewpoint of a developer who has been working with RxSwift for more than two years.</p>
<h2 id="publishers--subscribers">Publishers &amp; Subscribers</h2>
<p>These two are the equivalents of Observables and Observers in RxSwift. Together they make up the core components of Combine. As Apple put it:</p>
<blockquote>
<p>Combine declares publishers to expose values that can change over time, and subscribers to receive those values from the publishers.</p>
</blockquote>
<p>The great thing about using the native FRP framework is that it has been integrated into other Apple‚Äôs frameworks, making the migration process easier. Foundation framework has supported the use of Combine in some of its APIs, like <code>URLSession</code> in the following example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RepoListViewModel</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> cancellable: AnyCancellable?
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">fetchRepos</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> url = URL(string: <span style="color:#e6db74">&#34;https://api.github.com/users/itsmeichigo/repos&#34;</span>)<span style="color:#f92672">!</span>
</span></span><span style="display:flex;"><span>        cancellable = URLSession.shared.dataTaskPublisher(<span style="color:#66d9ef">for</span>: url)
</span></span><span style="display:flex;"><span>            .sink (receiveCompletion: { completion <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">switch</span> completion {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> .finished:
</span></span><span style="display:flex;"><span>                    print(<span style="color:#e6db74">&#34;Get repos finished&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">let</span> .failure(error):
</span></span><span style="display:flex;"><span>                    print(<span style="color:#e6db74">&#34;Get repos failed: </span><span style="color:#e6db74">\(</span>error<span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }, receiveValue: { (data, response) <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;Got repos data: </span><span style="color:#e6db74">\(</span>data<span style="color:#e6db74">)</span><span style="color:#e6db74">&#34;</span>)
</span></span><span style="display:flex;"><span>            })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In this example, <code>URLSession</code> uses <code>Publisher</code> as a wrapper to emit signals to its subscribers on receipt of response from the URL request.¬†<code>.sink</code> is a method to create a subscription by connecting a subscriber of type <code>Sink</code> to a publisher. This method accepts one closure for execution when receiving new elements and another for handling completion. This is similar to RxSwift Observable&rsquo;s <code>subscribe</code> method which lets us handle when a stream emits new event, completes or errors out.</p>
<p>Subscriptions in Combine can also be handled by assigning values to class properties that are marked with <code>@Published</code> - which is quite similar to <code>bind(to:)</code> method in RxSwift Observable:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">Repo</span>: Decodable {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> name: String
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> description: String?
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> language: String?
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RepoDetailViewModel</span> {
</span></span><span style="display:flex;"><span>    @Published <span style="color:#66d9ef">var</span> repoDetail: Repo?
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">fetchRepoDetail</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> url = URL(string: <span style="color:#e6db74">&#34;https://api.github.com/repos/itsmeichigo/Playgrounds&#34;</span>)<span style="color:#f92672">!</span>
</span></span><span style="display:flex;"><span>        URLSession.shared.dataTaskPublisher(<span style="color:#66d9ef">for</span>: url)
</span></span><span style="display:flex;"><span>            .tryMap(<span style="color:#960050;background-color:#1e0010">\</span>.data)
</span></span><span style="display:flex;"><span>            .decode(type: Repo?.<span style="color:#66d9ef">self</span>, decoder: JSONDecoder())
</span></span><span style="display:flex;"><span>            .replaceError(with: <span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>            .assign(to: <span style="color:#f92672">&amp;</span><span style="color:#960050;background-color:#1e0010">$</span>repoDetail)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Note: In case you‚Äôre wondering, since parameter sent to this <code>assign</code> method is <code>inout</code>, an <code>&amp;</code> operator is required to precede <code>$repoDetail</code>. The <code>$</code> operator is used for accessing the wrapped property itself.</p>
<p>The preceding example uses the property wrapper <code>@Published</code> to create a publisher that outputs values of type <code>Repo?</code> and has failure type <code>Never</code> (meaning the stream never fails - more on that later). The <code>repoDetail</code> therefore can be observed for changes by another subscriber:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RepoDetailViewController</span>: UIViewController {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">@IBOutlet</span> <span style="color:#66d9ef">var</span> titleLabel: UILabel!
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> viewModel: RepoDetailViewModel!
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> cancellable: AnyCancellable?
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">viewDidLoad</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">super</span>.viewDidLoad()
</span></span><span style="display:flex;"><span>        cancellable = viewModel.<span style="color:#960050;background-color:#1e0010">$</span>repoDetail
</span></span><span style="display:flex;"><span>            .map { $0?.name }
</span></span><span style="display:flex;"><span>            .assign(to: <span style="color:#960050;background-color:#1e0010">\</span>.text, on: titleLabel)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		viewModel.fetchRepoDetails()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>As can be noticed from the subscription of <code>repoDetail</code>, another method <code>assign(to:on:)</code> is used to assign the mapped <code>name</code> value to <code>titleLabel</code>&rsquo;s displayed text using KVO. This method keeps strong reference to the object passed to <code>on:</code>, so it should be used with caution to avoid retain cycle if you happen to send <code>self</code>. Although a quick workaround would be to send <code>weak self</code> instead, if you find yourself in such situation, it&rsquo;s time to use an <code>@Published</code> property instead (unfortunately <code>assign(to:)</code> is only available since iOS 14).</p>
<h2 id="subjects">Subjects</h2>
<p>Similar to RxSwift, Combine has the same concept of Subjects‚Ää‚Äî‚Ääthe types of publishers that allow injection of values to be published. Subjects are useful for quickly creating custom publishers and migrating from imperative programming to FRP. There are two built-in subjects:</p>
<ul>
<li><code>PassthroughSubject</code>: equivalent to PublishSubject in RxSwift. This subject broadcasts elements to downstream subscribers, suitable for stateless streams of events. This is usually used for observing user interactions (button taps, toggle switches etc.) or sending notifications.</li>
<li><code>CurrentValueSubject</code>: equivalent to BehaviorSubject in RxSwift. This subject wraps a stream of output of value type and exposes the most recently published element via <code>value</code> variable. New values can be injected to the stream by updating the <code>value</code> variable or using <code>send(_:)</code> method.</li>
</ul>
<h2 id="memory-management">Memory management</h2>
<p>If you look closely at the code examples in the first section, you‚Äôll notice the retaining of <code>AnyCancellable</code> after creating subscriptions. Methods¬†<code>.sink</code> and¬†<code>.assign(to:on:)</code> both return <code>AnyCancellable</code>, indicating that the subscriptions can be cancelled from outside. This retaining is important to keep the created data streams alive; and also to dispose them when they are no longer relevant - much like how <code>DisposeBag</code> is used in RxSwift.</p>
<p>Usually you would want to create more than one subscriptions in a class, so it is more practical to have a set of <code>AnyCancellable</code> objects to keep all the subscriptions in one place:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RepoDetailViewController</span>: UIViewController {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">@IBOutlet</span> <span style="color:#66d9ef">var</span> titleLabel: UILabel!
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">@IBOutlet</span> <span style="color:#66d9ef">var</span> descriptionLabel: UILabel!
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> viewModel: RepoDetailViewModel!
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> cancellables: Set&lt;AnyCancellable&gt; = []
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">override</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">viewDidLoad</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">super</span>.viewDidLoad()
</span></span><span style="display:flex;"><span>        viewModel.<span style="color:#960050;background-color:#1e0010">$</span>repoDetail
</span></span><span style="display:flex;"><span>            .map { $0?.name }
</span></span><span style="display:flex;"><span>            .assign(to: <span style="color:#960050;background-color:#1e0010">\</span>.text, on: titleLabel)
</span></span><span style="display:flex;"><span>            .store(<span style="color:#66d9ef">in</span>: &amp;cancellables)
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        viewModel.<span style="color:#960050;background-color:#1e0010">$</span>repoDetail
</span></span><span style="display:flex;"><span>            .map { $0?.description }
</span></span><span style="display:flex;"><span>            .assign(to: <span style="color:#960050;background-color:#1e0010">\</span>.text, on: descriptionLabel)
</span></span><span style="display:flex;"><span>            .store(<span style="color:#66d9ef">in</span>: &amp;cancellables)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		viewModel.fetchRepoDetails()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Here the lifecycle of <code>cancellablles</code> is tied with <code>RepoDetailViewController</code>, so when the view controller is released, the subscriptions stored in this property will all be cancelled and disposed as well.</p>
<p>But how about the method <code>assign(to:)</code>? Why didn&rsquo;t I retain the subscription made with it like I did with the other two methods?</p>

    <img src="https://media.giphy.com/media/UDFMOnaOrLx28/giphy.gif"  alt="https://media.giphy.com/media/UDFMOnaOrLx28/giphy.gif"  class="center"  />


<p>As you may have guessed, this method links the created subscription with the <code>@Published</code> property sent to it, so it does not require the same memory managment machanism as the two methods discussed earlier.</p>
<h2 id="type-matching-and-errorhandling">Type matching and error¬†handling</h2>
<p>In RxSwift, Observable is a generic type with an associated type Element defining the type of the data stream‚Äôs output. In Combine, a Publisher has two concerns: Output and Failure types. Failure type of a publisher can be either an <code>Error</code>-conforming type, or <code>Never</code> if it does not publish any error. So when creating a subscription, you have to make sure that the Input type of the subscriber match with the Output type of the publisher. More interestingly, their Failure types are also required to be the same, otherwise you&rsquo;ll encounter a mismatching types error.</p>
<p>Publisher extension has several operators to handle errors. In the <code>fetchRepoDetail()</code> example above I used <code>replaceError(with:)</code> to silent any decoding or response errors with <code>nil</code> since I wanted the failure type of the upstream publisher to match with that of the <code>@Published</code> property, which is <code>Never</code>. In cases when you are certain that no error should be thrown, <code>assertNoFailure()</code> can be used to transform failure type to <code>Never</code> or call assert otherwise. You can also use <code>retry()</code> to attempt recreating failed subscriptions to a specified number of times; or map the error to another publisher using <code>catch()</code>.</p>
<p>In real life situations, however, error handling is more often necessary‚Ää‚Äî‚Äähere‚Äôs how the code can be refactored for that purpose:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">enum</span> <span style="color:#a6e22e">RepoError</span>: Error {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> url(URLError)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> decode
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> unknown
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">RepoDetailViewModel</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> repoDetailSubject = CurrentValueSubject&lt;Repo?, RepoError&gt;(<span style="color:#66d9ef">nil</span>)
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">var</span> cancellable: Cancellable?
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">func</span> <span style="color:#a6e22e">fetchRepoDetails</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> url = URL(string: <span style="color:#e6db74">&#34;https://api.github.com/repos/itsmeichigo/Playgrounds&#34;</span>)<span style="color:#f92672">!</span>
</span></span><span style="display:flex;"><span>        cancellable = URLSession.shared.dataTaskPublisher(<span style="color:#66d9ef">for</span>: url)
</span></span><span style="display:flex;"><span>            .tryMap(<span style="color:#960050;background-color:#1e0010">\</span>.data)
</span></span><span style="display:flex;"><span>            .decode(type: Repo?.<span style="color:#66d9ef">self</span>, decoder: JSONDecoder())
</span></span><span style="display:flex;"><span>            .mapError { error -&gt; RepoError <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">switch</span> error {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">is</span> URLError:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> .url(error <span style="color:#66d9ef">as</span>! URLError)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">is</span> DecodingError:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> .decode
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">return</span> .unknown
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            .sink { [<span style="color:#66d9ef">weak</span> <span style="color:#66d9ef">self</span>] completion <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">self</span>?.repoDetailSubject.send(completion: completion)
</span></span><span style="display:flex;"><span>            } receiveValue: { [<span style="color:#66d9ef">weak</span> <span style="color:#66d9ef">self</span>] repos <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">self</span>?.repoDetailSubject.send(repos)
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>In the above solution, I‚Äôve changed the <code>@Published</code> property to a <code>CurrentValueSubject</code> to change the error type from <code>Never</code> to <code>RepoError</code>. Then I used <code>mapError</code> function to transform the errors from upstream to my custom error type <code>RepoError</code>.  The result publisher was finally subscribed using a <code>Sink</code> to send values and completion event to the subject. It&rsquo;s a pity that we cannot use <code>assign(to:)</code> with a subject like how we can bind observables to subjects or observers in RxSwift - but we can further improve this piece of code in the next section.</p>
<h2 id="type-eraser">Type eraser</h2>
<p>A quick look at the <a href="https://developer.apple.com/documentation/combine/publisher">Apple documentation of Publisher</a> can show that most operators used on publishers return their respective types extending the <code>Publishers</code> enum. Take the code snippet from the previous section as an example, if you paste it in a Playground and open Quick Help panel to investigate the returned types of each operator, you&rsquo;ll be surprised how the types can get more and more complicated after each operator:</p>
<ul>
<li><code>URLSession.shared.dataTaskPublisher</code> returns publisher of type <code>DataTaskPublisher</code></li>
<li>applying <code>tryMap</code>, we get the result of type <code>Publishers.TryMap&lt;URLSession.DataTaskPublisher, T&gt;</code></li>
<li>moving on with <code>decode</code>, we get <code>Publishers.Decode&lt;Publishers.TryMap&lt;URLSession.DataTaskPublisher, Data&gt;, Item, Coder&gt; where Item¬†: Decodable, Coder¬†: TopLevelDecoder, Self.Output == Coder.Input</code></li>
<li>finally, with <code>mapError</code> we end up with <code>Publishers.MapError&lt;Publishers.Decode&lt;Publishers.TryMap&lt;URLSession.DataTaskPublisher, Data&gt;, Repo?, JSONDecoder&gt;, E&gt;</code></li>
</ul>
<p>If we want to expose the publisher to external subscribers, we‚Äôll need a more generic type - <code>AnyPublisher</code> - as the subscribers only concern about the output and failure types of the publisher they subscribe to. This is where type erasing comes to play, and Combine has a method for this: <code>eraseToAnyPublisher()</code>. Let&rsquo;s see how we can use this to improve the implementation in the previous section:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">fetchDetail</span>() -&gt; AnyPublisher&lt;Repo, RepoError&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> url = URL(string: <span style="color:#e6db74">&#34;https://api.github.com/repos/itsmeichigo/Playgrounds&#34;</span>)<span style="color:#f92672">!</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> URLSession.shared.dataTaskPublisher(<span style="color:#66d9ef">for</span>: url)
</span></span><span style="display:flex;"><span>        .tryMap(<span style="color:#960050;background-color:#1e0010">\</span>.data)
</span></span><span style="display:flex;"><span>        .decode(type: Repo.<span style="color:#66d9ef">self</span>, decoder: JSONDecoder())
</span></span><span style="display:flex;"><span>        .mapError { error -&gt; RepoError <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">switch</span> error {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">is</span> URLError:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> .url(error <span style="color:#66d9ef">as</span>! URLError)
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">case</span> <span style="color:#66d9ef">is</span> DecodingError:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> .decode
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">default</span>:
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> .unknown
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        .eraseToAnyPublisher()
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>This time, a publisher is returned immediately from <code>fetchDetail()</code> function, and the <code>RepoDetailViewController</code> can subscribe directly to it and handle any received events. I can then safely remove redundant use and subscription of <code>CurrentValueSubject</code>, and the code looks much neater. The returned publisher is of type <code>AnyPublisher&lt;Repo?, RepoError&gt;</code>, which is informative enough for any external subscribers.</p>
<h2 id="future-anddeferred">Future and¬†Deferred</h2>
<p>In Combine, many publishers invoke their closures and emit values only after they get a subscription. For instance, a <code>DataTaskPublisher</code> starts a url request and emit subsequent result whenever it receives demand request from a subscriber. This also means that several subscriptions made to the same publisher can trigger multiple url requests and receive different response - which is not desirable if we just want to observe the same stream. Applying <code>share()</code> operator can solve that problem, making sure that the same output of the publisher is shared among its subscribers.</p>
<p>An alternative would be to wrap the <code>URLSessionDataTask</code> creation in a <code>Future</code>. It&rsquo;s a type of publisher that completes after emitting a <strong>single</strong> output value or failure. This result is republished to any subscriber listens to the same <code>Future</code> object. It&rsquo;s suitable for wrapping any asynchronous work that expects only one result. Since a url requests always returns response once and then completes - this is a perfect case for the use of <code>Future</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">fetchDetail</span>() -&gt; Future&lt;Repo, RepoError&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> url = URL(string: <span style="color:#e6db74">&#34;https://api.github.com/repos/itsmeichigo/Playgrounds&#34;</span>)<span style="color:#f92672">!</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> Future { promise <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>        URLSession.shared.dataTask(with: url) { (data, response, error) <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> error = error <span style="color:#66d9ef">as</span>? URLError {
</span></span><span style="display:flex;"><span>                promise(.failure(.url(error)))
</span></span><span style="display:flex;"><span>            } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#66d9ef">let</span> data = data {
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">do</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">let</span> decoder = JSONDecoder()
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">let</span> detail = <span style="color:#66d9ef">try</span> decoder.decode(Repo.<span style="color:#66d9ef">self</span>, from: data)
</span></span><span style="display:flex;"><span>                    promise(.success(detail))
</span></span><span style="display:flex;"><span>                } <span style="color:#66d9ef">catch</span> {
</span></span><span style="display:flex;"><span>                    promise(.failure(.decode))
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>                promise(.failure(.unknown))
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }.resume()
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Using <code>Future</code> requires extra caution though, especially if you apply <code>eraseToAnyPublisher()</code> as developers on the receiving end may not be aware of its distinctive features:</p>
<ul>
<li><code>Future</code> immediately invokes the asynchronous request in its closure at the time of creation.</li>
<li><code>Future</code> emits result only once so even though it&rsquo;s still possible to call <code>retry()</code> on it, the operator can&rsquo;t create new subscription after the publisher completes.</li>
</ul>
<p>A solution to delay the start of a <code>Future</code>&rsquo;s work while still taking advantage of its one-time result is to wrap it inside a <code>Deferred</code>. This is another special kind of publisher whose job is to wait for a subscription before triggering the supplied closure to create a new publisher. The implementation is simple:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-swift" data-lang="swift"><span style="display:flex;"><span><span style="color:#66d9ef">func</span> <span style="color:#a6e22e">createDeferred</span>() -&gt; Deferred&lt;Future&lt;Repo, RepoError&gt;<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>    Deferred {
</span></span><span style="display:flex;"><span>        Future { promise <span style="color:#66d9ef">in</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// The rest of implementation</span>
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>With the use of <code>Deferred</code>, a new <code>Future</code> object is created every time there&rsquo;s a new subscription, making the <code>Future</code> lazy - which is more similar to <code>Single</code> in RxSwift.</p>
<h2 id="backpressure">Backpressure</h2>
<p>I cannot end this article without mentioning backpressure. It defines the core principle of Combine: In a subscription, the subscriber controls the handling of events from the upstream publisher, including number of values to be received. As per the documentation on Publisher protocol, the following methods of the subscriber will be triggerred when it listens to a publisher:</p>
<ul>
<li><code>receive(subscription:)</code>: Notifies the subscriber of a succesful subscribe request and returns a <code>Subscription</code> instance. The subscriber uses this subscription object to request a <code>Subscriber.Demands</code> specifying the number items to receive, if any.</li>
<li><code>receive(_:)</code>: Delivers one element from the publisher to the subscriber. This methods returns another <code>Subscriber.Demands</code> to let the publisher know if any more demand for is needed.</li>
<li><code>receive(completion:)</code>: Informs the subscriber that publishing has ended, either normally or with an error.</li>
</ul>
<p>The specification of demands makes sure that the subscription sends just enough items as requested by the subscriber and no more. Below is an illustration for a <code>Sink</code> subscriber to visualize the relationship and clarify the explanations a little further (apologies for my poor drawing skills üôÇ):</p>
<p><img src="/posts/combine-from-rxswift/combine-carbon.png" alt="Illustration"></p>
<p>Backpressure is an advanced topic and as Apple keeps their implementations of publishers and subscribers private, the complexity of this management is hidden from developers. Understanding the principle of backpressure makes customization for publishers and subscribers possible. One particular use case for this is <a href="https://github.com/CombineCommunity/CombineCocoa">CombineCocoa by CombineCommunity</a>, which makes integration of Combine when using UIControls much more convenient. However, Apple strongly encourages that developers use the built-in convenience publishers and subjects instead of implementing custom ones, so it is important to look for simple solutions before tempting to overengineer to avoid bringing complexity and potential bugs to your projects.</p>
<h2 id="epilogue">Epilogue</h2>
<p>Since Combine only supports iOS 13 onwards, it may be a bit early for most of current projects to adopt. Nevertheless, it‚Äôs never too soon to learn new tech and start experimenting with it to get yourself comfortable and ‚Äúrelevant‚Äù. The framework itself is still under development and improvement, so don‚Äôt forget to check back in future WWDCs for any cool new updates. I hope this article inspires you to dive deeper and learn more about Combine. I would like to give my thanks to <a href="https://twitter.com/DonnyWals">Donny Wals</a> for his book <a href="https://gumroad.com/donnywals#XVbKP">Practical Combine</a>, as well as all the resources listed in the References section for making this article possible. In the meantime, you can also check out <a href="https://github.com/CombineCommunity/RxCombine">RxCombine</a> to discover the possiblities of bridging between the two frameworks. Have fun!</p>
<h2 id="references">References</h2>
<p><a href="https://developer.apple.com/documentation/combine">Apple Developer Documentation</a></p>
<p><a href="https://www.avanderlee.com/swift/combine/">Getting started with the Combine framework in Swift - SwiftLee</a></p>
<p><a href="https://github.com/CombineCommunity/rxswift-to-combine-cheatsheet">CombineCommunity/rxswift-to-combine-cheatsheet</a></p>
<p><a href="https://heckj.github.io/swiftui-notes/">Using Combine</a></p>
<p><a href="https://www.apeth.com/UnderstandingCombine/">Understanding Combine</a></p>
]]></content></item><item><title>Learning SwiftUI by Building a Slack-like Emoji Picker</title><link>/posts/swiftui-happy-panel/</link><pubDate>Wed, 02 Sep 2020 21:23:02 +0701</pubDate><guid>/posts/swiftui-happy-panel/</guid><description>&lt;p&gt;I started learning SwiftUI around August 2020 first with &lt;a href="https://developer.apple.com/tutorials/SwiftUI"&gt;Apple&amp;rsquo;s SwiftUI Tutorials&lt;/a&gt;. The tutorials were really fun and got me excited with using SwiftUI. I then continued with Paul Hudson&amp;rsquo;s series &lt;a href="https://www.hackingwithswift.com/100/swiftui"&gt;100 Days of SwiftUI&lt;/a&gt;. Around the end of series, I could not hesitate any longer so I started a new Xcode project and build one of the things I like most about Slack app: the emoji picker!&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/itsmeichigo/HappyPanel/blob/master/screenshot.png?raw=true" alt="Happy Panel"&gt;&lt;/p&gt;
&lt;p&gt;The point of the &lt;a href="https://github.com/itsmeichigo/HappyPanel"&gt;Happy Panel project&lt;/a&gt; was to learn SwiftUI and make use of its declarative syntax to build a complicated control with gestures and animations in a few lines of code. Because the biggest motivation for me to learn something new is to be able to make something beautiful and performant.&lt;/p&gt;</description><content type="html"><![CDATA[<p>I started learning SwiftUI around August 2020 first with <a href="https://developer.apple.com/tutorials/SwiftUI">Apple&rsquo;s SwiftUI Tutorials</a>. The tutorials were really fun and got me excited with using SwiftUI. I then continued with Paul Hudson&rsquo;s series <a href="https://www.hackingwithswift.com/100/swiftui">100 Days of SwiftUI</a>. Around the end of series, I could not hesitate any longer so I started a new Xcode project and build one of the things I like most about Slack app: the emoji picker!</p>
<p><img src="https://github.com/itsmeichigo/HappyPanel/blob/master/screenshot.png?raw=true" alt="Happy Panel"></p>
<p>The point of the <a href="https://github.com/itsmeichigo/HappyPanel">Happy Panel project</a> was to learn SwiftUI and make use of its declarative syntax to build a complicated control with gestures and animations in a few lines of code. Because the biggest motivation for me to learn something new is to be able to make something beautiful and performant.</p>
<p>Below is how I tried to solve the problem - more like a note on what I learned.</p>
<h1 id="starting-out-with-the-smallest-components-first">Starting out with the smallest components first</h1>
<ul>
<li>Search bar: essentially a text field with grey background color and search icon on the left. Search button should show up when the field is focused and disappear otherwise.</li>
<li>Emoji grid: a grid of buttons that returns the content to its parent when tapped. The grid can be built with a combination of VStack and HStack (which requires a 2-dimensional array), but SwiftUI 2 provides grid which is super helpful so I used LazyVGrid instead. This is a toy project, I don&rsquo;t care about users using iOS 13 anyway.</li>
<li>List with section headers containing the emoji grid. The cool thing about SwiftUI is that a lot of UI components are supported natively without much needed code and here&rsquo;s one of them: a <code>List</code> wrapping around a <code>Section</code> with header will give you a table view with sticky headers. This is way too convenient comparing to how I&rsquo;d have had to implement the same thing with UIKit.</li>
<li>Search result rows for filtered emojis.</li>
<li>Search result list.</li>
<li>Main content view: containing all the above components.</li>
<li>Section title picker to navigate between sections. I want this to float above the main content view so it&rsquo;s not contained in the main content view.</li>
<li>Main panel: containing a dimmed background, the main content view and the section title picker.</li>
</ul>
<h1 id="navigating-between-sections">Navigating between sections</h1>
<p>With the help of <code>ScrollViewReader</code> and <code>ScrollViewProxy</code>, navigating to a desired section of a list is so easy with a simple <code>scrollTo(_ id:)</code> function. The problem is I had to learn how to use it the hard way with very much frustration involved.</p>
<p>The magic of <code>ScrollViewProxy</code> is that it scans through the children to find the view with the <code>id</code> that you send it. It&rsquo;s as simple as that, but at first I tried to call the scroll function on the <code>List</code>, which crashes the app since my <code>List</code> doesn&rsquo;t immediately contain the view that I was looking for, but has it embeded inside a child <code>ForEach</code>. Moving the call downward to the child was the solution that took me almost a whole day.</p>
<p>There&rsquo;s a feature that I have yet to implement. It is expected that when the emoji grid is scrolled the section picker updates its selected segment accordingly. As far as I know this is natively impossible since SwiftUI <code>List</code> doesn&rsquo;t offer a way to read the current offset but if it does some day, I think I can compare the offset with the pre-calculated frame of each section. This is still fugly, and also when I can determine the current visible section and update the <code>currentCategory</code> environment variable, it would cause a circular reference since the picker itself is listening on any change of this variable to scroll to the correct section. So is there a better solution?</p>
<h1 id="moving-the-main-panel-with-drag-gesture">Moving the main panel with drag gesture</h1>
<p>Updating the main panel offset with drag gesture isn&rsquo;t the hardest part to begin with. I keep the 2 variables - one for the calculated offset and one for the last offset when the dragging gesture ends, which is used for calculated the first variable. Then I have some magic code to magnetize the panel to the top or close the panel based on where the gesture ends.</p>
<p>A problem I noticed was that if I move the main content view&rsquo;s code to main panel, the dragging performance suffers. I keep the same code and move it to a separate file, the dragging gets as smooth as it can ever get. This remains a mystery to me.</p>
<p>There&rsquo;s a challenge here though. Slack utilizes the drag gesture on the emoji grid view very well, when the panel is in half mode you can&rsquo;t scroll the grid but instead can only drag the panel. I tried to mimick this behavior but there&rsquo;s no native way to do intervene the scrolling behavior of the <code>List</code>. So I just leave it there and wait to see when SwiftUI provides such feature, if ever.</p>
<h1 id="environmentobject">@EnvironmentObject</h1>
<p>Originally I used a lot of <code>@State</code> and <code>@Binding</code> to send some states back and forth between children and parent views. I then decided to clean the mess up by using <code>@EnvironmentObject</code> so that all children and parents can have access to the same states of the view. This causes me to think if this is the intended behavior of the property wrapper itself - if it makes the state globablly available to all the listeners to both read and write, would it be safe? Like I may have some code in a view that has nothing to do with search keyword but alter the variable and the control will break. If SwiftUI&rsquo;s main purpose is to maintain states in a clean way then my usage of @EnvironmentObject is totally against the rule.</p>
<h1 id="an-open-ending-updated-in-july-2021">An open ending (updated in July 2021)</h1>
<p>I left the project with an open ending due to several challenges:</p>
<p>I have yet to handle <code>List</code> to behave properly to pan gesture. You can see some performance hitch when dragging the panel back and forth. In WWDC21 Apple introduced <a href="https://developer.apple.com/documentation/uikit/uisheetpresentationcontroller">UISheetPresentationController</a> - however this is not available natively on SwiftUI. It is possible to use wrapper though, as per <a href="https://www.donnywals.com/using-uisheetpresentationcontroller-in-swiftui/">Donny Wal&rsquo;s article</a>. I will need to look at that and see how I can improve the panel for iOS 15+.</p>
<p>As mentioned earlier, section picker needs to be updated when scrolling to respective sections. I have found a solution for this in a Mac app (more on that right below) - but the solution is not feasible on the floating panel due to the complication of gesture recognizers.</p>
<p>On a flip side, I started a menu bar app on MacOS and it was actually really fun since Mac app development is all new to me. I will note my learning on a separate post, so please stay tuned!</p>
<p>Until next time! üëã</p>
]]></content></item></channel></rss>