<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Huong Do</title><link>/</link><description>Recent content on Huong Do</description><generator>Hugo</generator><language>en</language><copyright>Huong Do</copyright><lastBuildDate>Mon, 12 Feb 2024 17:00:00 +0701</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a CLI tool with SwiftPM for Mac app distribution</title><link>/posts/dmg-notary/</link><pubDate>Mon, 12 Feb 2024 17:00:00 +0701</pubDate><guid>/posts/dmg-notary/</guid><description>&lt;p>Last week, I wanted to add an update to one of my mac apps &lt;a href="https://itsmeichigo.io/peachy">Peachy&lt;/a> after a long time. I realized that the &lt;code>atool&lt;/code> used for notarizing mac apps has long been discontinued and it was time to switch to &lt;a href="https://developer.apple.com/documentation/security/notarizing_macos_software_before_distribution">&lt;code>notarytool&lt;/code>&lt;/a>. It took me a while to read through Apple documentations and WWDC videos again to finally be able to distribute a working DMG for the new version.&lt;/p>
&lt;p>I had some free time due to the Lunar new year holiday, so this was an opportunity to learn something new. It&amp;rsquo;s time to automate the distribution process for my mac apps, and a CLI tool is a perfect solution for this.&lt;/p></description></item><item><title>Releasing Jot It Down üóíÔ∏è</title><link>/posts/jot-it-down/</link><pubDate>Mon, 30 Jan 2023 10:00:02 +0701</pubDate><guid>/posts/jot-it-down/</guid><description>&lt;p>&lt;img src="/posts/jot-it-down/Icon-1024.png" alt="Jot It Down">&lt;/p>
&lt;p>My new app &lt;a href="https://apps.apple.com/us/app/jot-it-down-minimal-note-app/id1668513911">Jot It Down&lt;/a> has been released on the Mac App Store!&lt;/p>
&lt;p>Jot It Down is a simple app to quickly note down ideas or checklists.&lt;/p>
&lt;p>Highlights:&lt;/p>
&lt;ul>
&lt;li>No formatting - focus on your contents only.&lt;/li>
&lt;li>Markdown content is highlighted automatically.&lt;/li>
&lt;li>Window always stays on top.&lt;/li>
&lt;li>Can copy checklist with Markdown format to save somewhere else.&lt;/li>
&lt;li>All notes are auto saved.&lt;/li>
&lt;li>Visit all past notes in the note list.&lt;/li>
&lt;li>Fully private: the app has no access to the Internet.&lt;/li>
&lt;li>Export files to your folders.&lt;/li>
&lt;/ul>
&lt;p>This was a small project created during my one week Lunar new year holiday. I always wanted a simple and accessible note app to jot down any quick thoughts and discard them later, and this app serves that purpose. Among thousands of note apps out there, hopefully Jot It Down is helpful for you too.&lt;/p></description></item><item><title>An Adventure with Swift Charts</title><link>/posts/swift-charts/</link><pubDate>Mon, 04 Jul 2022 12:23:02 +0700</pubDate><guid>/posts/swift-charts/</guid><description>&lt;p>&lt;em>This post was original posted on &lt;a href="https://mobile.blog/2022/07/04/an-adventure-with-swift-charts/">mobile.blog&lt;/a>.&lt;/em>&lt;/p>
&lt;p>As you all may already know, one of the cool new things introduced in WWDC 2022 was &lt;a href="https://developer.apple.com/documentation/Charts">Swift Charts&lt;/a>, a framework to create charts with SwiftUI. To learn more about the Swift Charts&amp;rsquo; potential, let&amp;rsquo;s go on a thrilling adventure to replace the chart in &lt;a href="https://apps.apple.com/us/app/woocommerce/id1389130815">WooCommerce iOS&lt;/a> with this ‚ú®‚ú® shiny new framework ‚ú®‚ú®.&lt;/p>
&lt;p>To get started, here&amp;rsquo;s what the chart currently looks like in WooCommerce iOS. We&amp;rsquo;d want to build something similar using Swift Charts:&lt;/p></description></item><item><title>Async Sequence instead of Combine?</title><link>/posts/async-sequence-combine/</link><pubDate>Tue, 14 Jun 2022 10:00:02 +0701</pubDate><guid>/posts/async-sequence-combine/</guid><description>&lt;p>Ever since WWDC 2021, I‚Äôve seen folks getting excited about the introduction of Swift concurrency, a.k.a async/await. It‚Äôs very common to come across comments that async/await will soon replace Combine, due to its potential and friendliness.&lt;/p>
&lt;p>&lt;strong>TL;DR&lt;/strong>: The motivation of this post is to discover the power of &lt;a href="https://href.li/?https://developer.apple.com/documentation/Swift/AsyncSequence">AsyncSequence&lt;/a> when used with &lt;a href="https://href.li/?https://github.com/apple/swift-async-algorithms">Async Algorithms&lt;/a>, to see if we can use it in place of Combine. To be more specific, I‚Äôm curious to see if we can use it with SwiftUI to handle form validation ‚Äì one of my favorite applications of Combine when working with SwiftUI.&lt;/p></description></item><item><title>Releasing Peachy üçë</title><link>/posts/peachy/</link><pubDate>Sun, 20 Mar 2022 10:00:02 +0701</pubDate><guid>/posts/peachy/</guid><description>&lt;p>&lt;img src="/posts/peachy/demo.gif" alt="Peachy Demo">&lt;/p>
&lt;p>I&amp;rsquo;m happy to announce that &lt;a href="https://itsmeichigo.io/peachy/">Peachy&lt;/a> is finally out in the wild! üéâ&lt;/p>
&lt;p>Peachy is a Mac app for entering Kaomojis easily. This was inspired by &lt;a href="https://matthewpalmer.net/rocket/">Rocket&lt;/a> and suggested/encouraged/challenged by a friend. I took this as an opportunity to get my feet wet with Mac app development, and it was a wholesome experience with a lot of challenges:&lt;/p>
&lt;ul>
&lt;li>Integration of SwiftUI and AppKit. SwiftUI is nice for creating simple views, but for complex customizations, AppKit is the solution. It was painful, but I did learn a lot.&lt;/li>
&lt;li>Integration of the Accessibility API and learning AppleScript.&lt;/li>
&lt;li>A lot of workarounds!&lt;/li>
&lt;li>Since Accessibility API doesn&amp;rsquo;t work with Sandbox, the app cannot be shipped in the App Store. This came with another bunch of challenges:
&lt;ul>
&lt;li>Creating and notarizing the DMG for the app.&lt;/li>
&lt;li>Hosting the app manually.&lt;/li>
&lt;li>Building a landing page to introduce the app.&lt;/li>
&lt;li>Managing app versions with &lt;a href="https://sparkle-project.org">Sparkle&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>More excitingly, Peachy is FREE and &lt;a href="https://github.com/itsmeichigo/peachy">opensource&lt;/a>! If you like Peachy, please feel free to &lt;a href="https://www.buymeacoffee.com/itsmeichigo">buy me a cocktail&lt;/a>. Cheers! üç∏&lt;/p></description></item><item><title>Working with observable objects in SwiftUI</title><link>/posts/swiftui-observable-objects/</link><pubDate>Sat, 11 Sep 2021 10:00:02 +0701</pubDate><guid>/posts/swiftui-observable-objects/</guid><description>&lt;p>Earlier this week I learned about &lt;code>@StateObject&lt;/code> &lt;a href="https://developer.apple.com/documentation/swiftui/stateobject/init%28wrappedvalue:%29">initializer&lt;/a> when reviewing a pull request. The idea was to create a view model for a SwiftUI view using some injected parameter and keep the view model as a &lt;code>@StateObject&lt;/code> so that the its state is persisted when the view is redrawn. The view creates the &lt;code>@StateObject&lt;/code> like so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ItemViewModel&lt;/span>: ObservableObject {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @Published &lt;span style="color:#66d9ef">var&lt;/span> itemName: String
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(item: Item) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">self&lt;/span>.itemName = item.name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">ItemView&lt;/span>: View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> @StateObject &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> viewModel: ItemViewModel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">init&lt;/span>(item: Item) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _viewModel = StateObject(wrappedValue: ItemViewModel(item: item))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> body: some View {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> TextField(&lt;span style="color:#e6db74">&amp;#34;Item Name&amp;#34;&lt;/span>, text: viewModel.&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>itemName)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The problem with this initializer is that it&amp;rsquo;s not meant to be used directly. As Apple documentation says it:&lt;/p></description></item><item><title>Breaking down large pull requests</title><link>/posts/breaking-down-pull-requests/</link><pubDate>Tue, 13 Jul 2021 17:02:02 +0700</pubDate><guid>/posts/breaking-down-pull-requests/</guid><description>&lt;p>&lt;em>This post was originally posted in WooCommerce Mobile Project &lt;a href="https://wordpress.com/p2/">P2&lt;/a> page. I figure this can be useful for other fellow developers as well so this is my public version of the post.&lt;/em>&lt;/p>
&lt;p>Usually we have several teams working on different features, and we break down tasks into bite-size ones ‚Äì so large PRs aren‚Äôt really a problem. However, for folks working alone on a backlog story, or joining the team for General Maintenance Rotation, and especially Trialmatticians ‚Äì it‚Äôs common to face the issue of handling a big task and having to break them down into smaller parts. So what are the best practices for this situation?&lt;/p></description></item><item><title>Releasing Fretboard üé∏</title><link>/posts/fretboard/</link><pubDate>Sat, 30 Jan 2021 10:00:02 +0701</pubDate><guid>/posts/fretboard/</guid><description>&lt;p>&lt;img src="/posts/fretboard/logo.png" alt="Fretboard Logo">&lt;/p>
&lt;p>&lt;a href="https://github.com/itsmeichigo/Fretboard">Fretboard&lt;/a> is a weekend project to display guitar and ukulele chords using SwiftUI.&lt;/p>
&lt;p>Features:&lt;/p>
&lt;ul>
&lt;li>üéµ Chord positions&lt;/li>
&lt;li>üåó Light / Dark modes&lt;/li>
&lt;li>üé∏ Guitar &amp;amp; ukulele chords with basic tunings&lt;/li>
&lt;li>‚è≥ More to come.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;h4 id="swift-package-manager">Swift Package Manager&lt;/h4>
&lt;p>Add &lt;a href="https://github.com/itsmeichigo/Fretboard.git">https://github.com/itsmeichigo/Fretboard.git&lt;/a> as the source and you&amp;rsquo;re good to go.&lt;/p>
&lt;h4 id="manual-install">Manual install&lt;/h4>
&lt;p>Copy contents from Sources folder to your project.&lt;/p>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>Get your desired instruments:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Swift" data-lang="Swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> guitar = Instrument.guitar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> ukulele = Instrument.ukulele
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Each instrument comes with their own name, keys, suffixes and chords. Get a list of positions for a chord using key and suffix:&lt;/p></description></item><item><title>Combine from RxSwift - Highlights for smooth adaption</title><link>/posts/combine-from-rxswift/</link><pubDate>Wed, 16 Dec 2020 21:23:02 +0700</pubDate><guid>/posts/combine-from-rxswift/</guid><description>&lt;p>RxSwift has been around since 2015 and widely known among Apple developer community as an efficient open-sourced FRP library. In WWDC 2019 Apple introduced their very own FRP framework, making it possible to utilize the paradigm natively with declarative Swift API. The two frameworks share quite a few similarities in terms of principles and usage, so it can be not too daunting to get your feet wet with Combine if you have already been using RxSwift in your projects.&lt;/p></description></item><item><title>Learning SwiftUI by Building a Slack-like Emoji Picker</title><link>/posts/swiftui-happy-panel/</link><pubDate>Wed, 02 Sep 2020 21:23:02 +0701</pubDate><guid>/posts/swiftui-happy-panel/</guid><description>&lt;p>I started learning SwiftUI around August 2020 first with &lt;a href="https://developer.apple.com/tutorials/SwiftUI">Apple&amp;rsquo;s SwiftUI Tutorials&lt;/a>. The tutorials were really fun and got me excited with using SwiftUI. I then continued with Paul Hudson&amp;rsquo;s series &lt;a href="https://www.hackingwithswift.com/100/swiftui">100 Days of SwiftUI&lt;/a>. Around the end of series, I could not hesitate any longer so I started a new Xcode project and build one of the things I like most about Slack app: the emoji picker!&lt;/p>
&lt;p>&lt;img src="https://github.com/itsmeichigo/HappyPanel/blob/master/screenshot.png?raw=true" alt="Happy Panel">&lt;/p>
&lt;p>The point of the &lt;a href="https://github.com/itsmeichigo/HappyPanel">Happy Panel project&lt;/a> was to learn SwiftUI and make use of its declarative syntax to build a complicated control with gestures and animations in a few lines of code. Because the biggest motivation for me to learn something new is to be able to make something beautiful and performant.&lt;/p></description></item><item><title>About</title><link>/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/about/</guid><description>&lt;p>Hi there üëã&lt;/p>
&lt;p>My name is Huong Do, a.k.a ichigo (yes, lowercased) for simpler pronunciation.
I work fulltime as an iOS developer and spend my free time drinking tea, reading fictions and making random things like apps.&lt;/p>
&lt;p>&lt;img src="https://media.giphy.com/media/mTs11L9uuyGiI/giphy.gif" alt="https://media.giphy.com/media/mTs11L9uuyGiI/giphy.gif">&lt;/p></description></item><item><title>Apps</title><link>/apps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/apps/</guid><description/></item></channel></rss>